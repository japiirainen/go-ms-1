// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Cat struct {
	// postgres id for a cat
	ID string `json:"id"`
	// breed of the cat
	Breed string `json:"breed"`
	// color of the cat
	Color string `json:"color"`
	// gender of the cat
	Gender Gender `json:"gender"`
	// owner of the cat (relation to owner by owbers id)
	Owner string `json:"owner"`
}

type NewCat struct {
	ID     string `json:"id"`
	Breed  string `json:"breed"`
	Color  string `json:"color"`
	Gender Gender `json:"gender"`
	Owner  string `json:"owner"`
}

type NewOwner struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type Owner struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Username string `json:"username"`
	Password string `json:"password"`
	Cats     []*Cat `json:"cats"`
}

type Gender string

const (
	GenderFamale Gender = "famale"
	GenderMale   Gender = "male"
)

var AllGender = []Gender{
	GenderFamale,
	GenderMale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderFamale, GenderMale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GENDER", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
